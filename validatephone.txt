import { LightningElement, track } from 'lwc';
import { loadScript } from 'lightning/platformResourceLoader';
import libphonenumberFull from '@salesforce/resourceUrl/libphonenumber_full';

export default class PhoneNumberValidator extends LightningElement {
    @track countryCode = '';
    @track phoneNumber = '';
    @track validationMessage = '';
    isLibraryLoaded = false;

    handleCountryCodeChange(event) {
        this.countryCode = event.target.value;
    }

    handlePhoneNumberChange(event) {
        this.phoneNumber = event.target.value;
    }

    connectedCallback() {
        // Load the libphonenumber library dynamically
        if (!this.isLibraryLoaded) {
            loadScript(this, libphonenumberFull + '/libphonenumber.js')
                .then(() => {
                    this.isLibraryLoaded = true;
                    console.log('libphonenumber library loaded successfully.');
                })
                .catch(error => {
                    console.error('Error loading libphonenumber library', error);
                    this.validationMessage = 'Failed to load phone number validation library.';
                });
        }
    }

    validatePhoneNumber() {
        /*const usPhonePattern = /^(?:\+1\s?)?(?:\(?[2-9][0-9]{2}\)?[\s.-]?)?[2-9][0-9]{2}[\s.-]?[0-9]{4}$/;
        const inPhonePattern = = /^((?:\+91|91|0)?(?:[6789]\d{9}|1\d{7,12}|[2-9]\d{7}))$/;
        const chinaPhonePattern = /^(?:8\d{11}|[2-9]\d{8}|(?:2[12467]|3[1-4]|4[134]|5[256]|6[12]|[7-9]1)\d{7}|(?:6[89]|7[235-9])\d{7}|800\d{6}|90[016]\d{6}|84[0248]\d{6}|878\d{6}|74[0248]\d{6}|5[18]\d{7}|860\d{9})$/;
        const japanPhonePattern = /^(00[1-9]\d{6,14}|[257-9]\d{9}|1(?:1[235-8]|2[3-6]|3[3-9]|4[2-6]|5[2-8]|6[2-7]|7[2-9]|9[1-9])\d{6}|60\d{7}|7[0-9]\d{8}|50[1-9]\d{7}|800\d{6}|00777(?:[01]|5\d)\d{2}|990\d{6})$/;
            const ukPhoneRegex = /^(?:7(?:457[0-57-9]|700[01]|911[028])\d{5}|7(?:[1-3]\d\d|4(?:[0-46-9]\d|5[0-689])|5(?:0[0-8]|[13-9]\d|2[0-35-9])|7(?:0[1-9]|[1-7]\d|8[02-9]|9[0-689])|8(?:[014-9]\d|[23][0-8])|9(?:[024-9]\d|1[02-9]|3[0-689]))\d{6}|1(?:1(?:3(?:[0-58]\d\d|73[0-35])|4(?:[0-5]\d\d|70\d|69[7-9])|(?:5[0-26-9]|[78][0-49]|6(?:[0-4]\d|50))\d)|2(?:0[024-9]|2[3-9]|3[3-79]|4[1-689]|[58][02-9]|6[0-47-9]|7[013-9]|9\d|1(?:[0-7]\d|8[0-3]))\d|3(?:0\d|1[0-8]|[25][02-9]|3[02-579]|[468][0-46-9]|7[1-35-79]|9[2-578])|4(?:0[03-9]|[137]\d|[28][02-57-9]|4[02-69]|5[0-8]|[69][0-79])|5(?:0[1-35-9]|[16]\d|2[024-9]|3[015689]|4[02-9]|5[03-9]|7[0-35-9]|8[0-468]|9[0-57-9])|6(?:0[034689]|1\d|2[0-35689]|[38][013-9]|4[1-467]|5[0-69]|6[13-9]|7[0-8]|9[0-24578])|7(?:0[0246-9]|2\d|3[0236-8]|4[03-9]|5[0-46-9]|6[013-9]|7[0-35-9]|8[024-9]|9[02-9])|8(?:0[35-9]|2[1-57-9]|3[02-578]|4[0-578]|5[124-9]|6[2-69]|7\d|8[02-9]|9[02569])|9(?:0[02-589]|[18]\d|2[02-689]|3[1-57-9]|4[2-9]|5[0-579]|6[2-47-9]|7[0-24578]|9[2-57]))\d\d\d)|2(?:0[013478]|3[0189]|4[017]|8[0-46-9]|9[0-2])\d{3})\d{4}|70\d{8}|56\d{8}|800\d{6,7}|80[08]\d{7}|(?:8(?:4[2-5]|7[0-3])|9(?:[01]\d|8[2-49]))\d{7}|845464\d|76(?:464|652)\d{5}|76(?:0[0-28]|2[356]|34|4[01347]|5[49]|6[0-369]|77|8[14]|9[139])\d{6}|(?:3[0347]|55)\d{8})$/;
const canadaPhoneRegex =  /^(?:(?:[2-8]\d|90)\d{8}|3\d{6}|(?:2(?:04|[23]6|[48]9|50|63)|3(?:06|43|54|6[578]|82)|4(?:03|1[68]|[26]8|3[178]|50|74)|5(?:06|1[49]|48|79|8[147])|6(?:04|[18]3|39|47|72)|7(?:0[59]|42|53|78|8[02])|8(?:[06]7|19|25|7[39])|90[25])[2-9]\d{6}|8(?:00|33|44|55|66|77|88)[2-9]\d{6}|900[2-9]\d{6}|310\d{4})$/;
const italyPhoneRegex = new RegExp('^(' + 
    '0\\d{5,10}|' + 
    '1\\d{8,10}|' + 
    '3(?:[0-8]\\d{7,10}|9\\d{7,8})|' + 
    '(?:43|55|70)\\d{8}|' + 
    '8\\d{5}(?:\\d{2,4})?|' + 
    '0669[0-79]\\d{1,6}|' + 
    '3[2-9]\\d{7,8}|' + 
    '80(?:0\\d{3}|3)\\d{3}|' + 
    '(?:0878\\d{3}|89(?:2\\d|3[04]|4[0-4]|4[5-9]\\d\\d|5[0-4]))\\d\\d|' + 
    '84(?:[08]\\d{3}|[17])\\d{3}|' + 
    '1(?:78\\d|99)\\d{6}|' + 
    '55\\d{8}' + 
')$');
    const germanyRegex = ^(?:\d{2}\d{3,13}|\d{3}\d{3,12}|\d{4}\d{2,11}|\d{5}\d{2,10}|32\d{9,11}|49\d{3,14}|(?:1|[2579])\d{5,14}|1(?:5[0-25-9]|6[023]|7[0-57-9])\d{7,8}|800\d{7,12}|13(?:7[1-6]|8)\d{4}|(?:900[135]|9009\d)\d{6}|700\d{8}|(?:180|18(?:1|[2-9])\d)\d{5,11})$;
    const luxembergRegex = ^(?:35[013-9]\d{4,8}|6\d{8}|35\d{2,4}|(?:[2457-9]\d|3[0-46-9])\d{2,9}|(?:2[2-9]|3[0-46-9]|[457]\d|8[13-9]|9[2-579])\d{2,9}|6(?:[269][18]|5[1568]|7[189]|81)\d{6}|800\d{5}|90[015]\d{5}|801\d{5}|20(?:1\d{5}|[2-689]\d{1,7}))$;
    const hongkongRegex = ^(?:8[0-46-9]\d{6,7}|9\d{4,7}|[2-7]\d{7}|9\d{3}\d{7}|(?:2(?:[13-9]\d|2[013-9])\d|3(?:[1569][0-24-9]|4[0-246-9]|7[0-24-69]|8(?:4[0-8]|[579]\d|6[0-2]))|58(?:0[1-9]|1[2-9]))\d{4}|(?:4(?:44[0-25-9]|6(?:1[0-7]|4[0-57-9]|6[0-4]))|5(?:73[0-6]|95[0-8])|6(?:26[013-8]|66[0-3])|70(?:7[1-8]|8[0-4])|848[0-35-9]|9(?:29[013-9]|39[01]|59[0-4]|899))\d{4}|(?:4(?:4[0-35-9]|6[02357-9]|70)|5(?:[1-59][0-46-9]|6[0-4689]|7[0-246-9])|6(?:0[1-9]|[13-59]\d|[268][0-57-9]|7[0-79])|70[1-39]|84[0-39]|9(?:0[1-9]|1[02-9]|[2358][0-8]|[467]\d))\d{5}|800\d{6}|900(?:[0-24-9]\d{7}|3\d{1,4})|8(?:1[0-4679]\d|2(?:[0-36]\d|7[0-4])|3(?:[034]\d|2[09]|70))\d{4}|30(?:0[1-9]|[15-7]\d|2[047]|89)\d{4})$;
    const taiwanRegex = ^(?:[2-689]\d{8}|7\d{9,10}|[2-8]\d{7}|2\d{6}|(?:2[2-8]\d|370|55[01]|7[1-9])\d{6}|4(?:0(?:0[1-9]|[2-48]\d)|1[023]\d)\d{4,5}|4(?:[239]\d\d|4(?:0[56]|12|49))\d{5}|6(?:[01]\d{7}|4(?:0[56]|12|24|4[09])\d{4,5})|8(?:2(?:3\d|4[0-269]|[578]0|66)|36[24-9]|90\d\d)\d{4}|8(?:4(?:0[56]|12|24|4[09])\d{4,5})|(?:2(?:2(?:0\d\d|4(?:0[68]|[249]0|3[0-467]|5[0-25-9]|6[0235689]))|3(?:[09]\d|1[0-4])|[4-7]\d\d|4(?:2[089]|7[1-9]|3[0-4]|[78]\d|9[01])\d)\d)\d{3}|(?:40001[0-2]|9[0-8]\d{4})\d{3}|80[0-79]\d{6}|800\d{5}|20(?:[013-9]\d\d|2)\d{4}|99\d{7}|7010(?:[0-2679]\d|3[0-7]|8[0-5])\d{5}|70\d{8})$;
    const southAfricaRegex = ^(?:[1-79]\d{8}|8\d{4,9}|(?:2(?:0330|4302)|52087)0\d{3}|(?:1[0-8]|2[1-378]|3[1-69]|4\d|5[1346-8])\d{7}|(?:1(?:3492[0-25]|4495[0235]|549(?:20|5[01]))|4[34]492[01])\d{3}|8[1-4]\d{3,7}|(?:2[27]|47|54)4950\d{3}|(?:1(?:049[2-4]|9[12]\d\d)|(?:6\d\d|7(?:[0-46-9]\d|5[0-4]))\d\d|8(?:5\d{3}|7(?:08[67]|158|28[5-9]|310)))\d{4}|(?:1[6-8]|28|3[2-69]|4[025689]|5[36-8])4920\d{3}|(?:12|[2-5]1)492\d{4}|80\d{7}|(?:86[2-9]|9[0-2]\d)\d{6}|860\d{6}|87(?:08[0-589]|15[0-79]|28[0-4]|31[1-9])\d{4}|87(?:[02][0-79]|1[0-46-9]|3[02-9]|[4-9]\d)\d{5}|861\d{6,7})$;
    const UAEregex = ^(?:[4-7]\d{7}|9[0-689]\d{7}|800\d{2,9}|[2-4679]\d{7}|5[024-68]\d{7}|400\d{6}|900[02]\d{5}|700[05]\d{5}|600[25]\d{5})$;
    const singaporeRegex = ^(?:1\d{9}|8\d{7}|7000\d{7}|[3689]\d{7}|662[0-24-9]\d{4}|6(?:[0-578]\d|6[013-57-9]|9[0-35-9])\d{5}|8(?:09[0-689]|95[0-2])\d{4}|(?:8(?:0[1-8]|[1-8]\d|9[0-4])|9[0-8]\d)\d{5}|(?:18|8)00\d{7}|1900\d{7}|(?:3[12]\d|666)\d{5})$;
    const saudiArabiaRegex = ^(?:92\d{7}|[15]\d{8}|8\d{9}|1(?:1\d|2[24-8]|3[35-8]|4[3-68]|6[2-5]|7[235-7])\d{6}|579[01]\d{5}|5(?:[013-689]\d|7[0-8])\d{6}|800\d{7}|925\d{6}|920\d{6}|811\d{7})$;
    const qatarRegex = ^(?:800\d{4}|[2-7]\d{7}|0080\d{7}|4(?:1111|2022)\d{3}|4(?:[04]\d\d|14[0-6]|999)\d{4}|2[16]\d{5})$;
    const australiaRegex = ^(?:1(?:[0-79]\d{7}(?:\d{3})?|8[0-24-9]\d{7}|3\d{4,7}|6\d{4,7}|900\d{4,5})|[2-478]\d{8}|4(?:79[01]|83[0-389]|94[0-4])\d{5}|4(?:[0-36]\d|4[047-9]|5[0-25-9]|7[02-8]|8[0-24-9]|9[0-37-9])\d{6}|180(?:0\d{3}|2\d{3})|190[0-26]\d{6}|13(?:00\d{6}(?:\d{2})?|45[0-4]\d{3}|[0-9]\d{4})|14(?:5(?:1[0458]|[23][458])|71\d)\d{4}|163\d{2,6})$;
    const newZealandRegex = ^(?:[1289]\d{9}|50\d{5}(?:\d{2,3})?|[27-9]\d{7,8}|(?:[34]\d|6[0-35-9])\d{6}|8\d{4,6}|24099\d{3}|(?:3[2-79]|[49][2-9]|6[235-9]|7[2-57-9])\d{6}|2(?:[0-27-9]\d|6)\d{6,7}|2(?:1\d|75)\d{5}|508\d{6,7}|80\d{6,8}|(?:1[13-57-9]\d{5}|50(?:0[08]|30|66|77|88))\d{3}|90\d{6,8}|70\d{7})$;
    const estoniaRegex = ^(?:8\d{9}|[4578]\d{7}|(?:[3-8]\d|90)\d{5}|(?:3[23589]|4[3-8]|6\d|7[1-9]|88)\d{5}|5\d{5}|8(?:1(?:0(?:0(?:00|[178]\d)|[3-9]\d\d)|(?:1(?:0[236]|1\d)|(?:2[0-59]|[3-79]\d)\d)\d)|2(?:0(?:0(?:00|4\d)|(?:19|[2-7]\d)\d)|(?:(?:[124-6]\d|3[5-9])\d|7(?:[0-79]\d|8[13-9])|8(?:[2-6]\d|7[01]))\d))\d{2}|5(?:[02]\d|5[0-478]|1(?:[0-8]\d|95)|6(?:4[0-4]|5[1-589]))\d{3}|800(?:0\d\d|1|[2-9])\d{3}|(?:40\d\d|900)\d{4}|70[0-2]\d{5})$;
    const lithuniaRegex = ^(?:[3469]\d{7}|52\d{6}|[78]0\d{6}|(?:3[1478]|4[124-6]|52)\d{6}|6\d{7}|80[02]\d{5}|9(?:0[0239]|10)\d{5}|808\d{5}|70[05]\d{5}|[89]01\d{5})$;
    const latviaRegex = ^(?:[268]\d{7}|90\d{6}|23(?:23[0-57-9]|33[0238])\d{3}|2(?:[0-24-9]\d{2}|3(?:0[07]|[14-9]\d|2[024-9]|3[0-24-9]))\d{4}|80\d{6}|81\d{6})$;
    const norwayRegex = ^(?:0\d{4}|[2-9]\d{7}|2[1-4]\d{6}|3[1-3578]\d{6}|5[1-35-7]\d{6}|6[1-4679]\d{6}|7[0-8]\d{6}|4[015-8]\d{6}|9\d{7}|80[01]\d{5}|82[09]\d{5}|810(?:0[0-6]|[2-8]\d)\d{3}|880\d{5}|85[0-5]\d{5})$;
    const swedenRegex = ^(?:[1-9]\d{5,11}|(?:[26]\d\d|9)\d{9}|7[02369]\d{7}|20\d{4,7}|649\d{6}|99[1-59]\d{4,7}|9(?:00|39|44)[1-8]\d{3,6}|77[0-7]\d{6}|75[1-8]\d{6}|10[1-8]\d{6}|74[02-9]\d{6}|25[245]\d{9}|67[3-68]\d{9})$;
    const denmarkRegex = ^(?:[2-7]\d{7}|8[126-9]\d{6}|9[1-46-9]\d{6}|(?:(?:2\d|9[1-46-9])\d|3(?:[0-37]\d|4[013]|5[0-58]|6[01347-9]|8[0-8]|9[0-79])|4(?:[0-25]\d|[34][02-9]|6[013-579]|7[013579]|8[0-47]|9[0-27])|5(?:[0-36]\d|4[0146-9]|5[03-57-9]|7[0568]|8[0-358]|9[0-69])|6(?:[013578]\d|2[0-68]|4[02-8]|6[01689]|9[015689])|7(?:[0-69]\d|7[03-9]|8[0147])|8(?:[16-9]\d|2[0-58]))\d{5}|80\d{6}|90\d{6})$;
    const southKoreaPhoneNumberPattern = /^(?:00[1-9]\d{8,11}|(?:[12]|5\d{3})\d{7}|[13-6]\d{9}|(?:[1-6]\d|80)\d{7}|[3-6]\d{4,5}|(?:00|7)0\d{8}|(?:2|3[1-3]|[46][1-4]|5[1-5])[1-9]\d{6,7}|(?:3[1-3]|[46][1-4]|5[1-5])1\d{2,3}|1(?:05(?:[0-8]\d|9[0-6])|22[13]\d)\d{4,5}|1(?:0[0-46-9]|[16-9]\d|2[013-9])\d{6,7}|00(?:308\d{6,7}|798\d{7,9})|(?:00368|[38]0)\d{7}|60[2-9]\d{6}|50\d{8,9}|70\d{8}|15\d{7,8})$/;
    const franceRegex = ^(?:[1-9]\d{8}|(?:26[013-9]|59[1-35-9])\d{6}|(?:[13]\d|2[0-57-9]|4[1-9]|5[0-8])\d{7}|(?:6(?:[0-24-8]\d|3[0-8]|9[589])|7[3-9]\d)\d{6}|80[0-5]\d{6}|836(?:0[0-36-9]|[1-9]\d)\d{4}|8(?:1[2-9]|2[2-47-9]|3[0-57-9]|[569]\d|8[0-35-9])\d{6}|8(?:1[01]|2[0156]|4[024]|84)\d{6}|9\d{8}|80[6-9]\d{6})$;
        https://chatgpt.com/share/f0c8dc2b-8978-40f5-903a-ab70724d549d

        return usPhonePattern.test(phoneNumber);*/
        if (!this.isLibraryLoaded) {
            this.validationMessage = 'Phone number validation library is not loaded yet.';
            return;
        }

        try {
            // Use libphonenumber to validate the phone number
            const phoneUtil = i18n.phonenumbers.PhoneNumberUtil.getInstance();
            const regionCode = this.countryCode.toUpperCase();

            const number = phoneUtil.parseAndKeepRawInput(this.phoneNumber, regionCode);
            const isValid = phoneUtil.isValidNumberForRegion(number, regionCode);

            this.validationMessage = isValid ? 'Valid phone number.' : 'Invalid phone number.';
        } catch (error) {
            this.validationMessage = 'Error validating phone number: ' + error.message;
        }
    }
}